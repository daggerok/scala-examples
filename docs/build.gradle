buildscript {
  ext {
    adocProcessingOutputDir = project.file("$buildDir/asciidoc")
    adocOutputDir = project.file("$rootDir/target/generated-docs")
  }
}

plugins {
  id "base"
  id "org.asciidoctor.convert" version "1.5.6"
  id "org.ajoberstar.git-publish" version "0.2.2"
}

version "0.0.1"
group "daggerok"

asciidoctorj {
  version = "1.5.5"
}

asciidoctor {
  sourceDir = project.file("src")
  sources {
    include "index.adoc"
  }
  outputDir = project.file("$adocProcessingOutputDir")
  attributes toc: "left",
      idprefix: "",
      docinfo1: "",
      icons: "font",
      idseparator: "-",
      setanchors: "true",
      "source-highlighter": "coderay",
      "toc-title": "Table of Contents",
      "build-gradle": file("build.gradle"),
      "endpoint-url": "https://daggerok.github.io/scala-examples"
}

asciidoctor.doLast {
  def html5 = "$adocProcessingOutputDir/html5"
  project.file("$html5/404.html").text = project.file("$html5/index.html").text
  project.file("$html5/.nojekyll").text = ''
}

task documentation(type: Copy, dependsOn: asciidoctor) {
  shouldRunAfter clean, asciidoctor
  from "$asciidoctor.outputDir/html5"
  from "$asciidoctor.outputDir/pdf"
  from "$asciidoctor.sourceDir/static", {
    into '.'
  }
  into adocOutputDir
}

gitPublish {
  // repoUri = "git@gitlab.com:daggerok/${rootProject.name}.git" // same gitlab plugin?
  repoUri = "git@github.com:daggerok/${rootProject.name}.git"
  branch = 'gh-pages'

  contents {
    from adocOutputDir, {
      into '.'
    }
  }

  commitMessage = "Publish $rootProject.name documentation (${project.group}:${project.name}:$project.version)"
}

gitPublishPush.dependsOn asciidoctor
gitPublishPush.shouldRunAfter clean, asciidoctor, build

task docs(dependsOn: gitPublishPush)
